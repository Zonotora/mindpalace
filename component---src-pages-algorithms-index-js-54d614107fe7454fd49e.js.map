{"version":3,"sources":["webpack:///./src/pages/algorithms/index.js"],"names":["formatDate","currentDate","date","time","Math","abs","days","ceil","months","floor","years","paletteColor","tag","p","hash","length","i","charCodeAt","paletteHash","FileSystemItem","fileName","fileType","lastModified","tagsInFiles","className","map","key","style","color","left","FileInformation","numberOfDirs","numberOfFiles","SearchItem","search","ref","dangerouslySetInnerHTML","__html","snapshot","IndexPage","data","useState","siteTitle","setSiteTitle","url","dirs","files","setLastModified","searchResults","setSearchResults","useEffect","nodes","allMarkdownRemark","edges","filter","node","frontmatter","slug","startsWith","substring","split","modified","forEach","Date","toISOString","hasOwnProperty","title","lastIndexOf","searches","to","filesystem","dir","file","parent"],"mappings":"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","file":"component---src-pages-algorithms-index-js-54d614107fe7454fd49e.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { FaRegFile, FaFolder, FaTag } from \"react-icons/fa\";\n\nimport Layout from \"components/Layout\";\nimport { DirectoryHeader } from \"components/Header\";\nimport { BackButton } from \"components/Button\";\nimport Searchfield from \"components/Searchfield\";\nimport \"templates/template.css\";\n\nconst formatDate = (currentDate, date) => {\n  const time = Math.abs(currentDate - date);\n  const days = Math.ceil(time / (1000 * 60 * 60 * 24));\n  const months = Math.floor(days / 31);\n  const years = Math.floor(days / 365);\n\n  if (years > 0) return `${years} year${years > 1 ? \"s\" : \"\"} ago`;\n  else if (months > 0) return `${months} month${months > 1 ? \"s\" : \"\"} ago`;\n  else if (days === 0) return \"today\";\n  return `${days} day${days > 1 ? \"s\" : \"\"} ago`;\n};\n\nconst paletteHash = (tag) => {\n  var hash = 0;\n  if (tag.length === 0) return hash;\n  for (let i = 0; i < tag.length; i++) {\n    let chr = tag.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0;\n  }\n  return Math.abs(hash);\n};\n\nconst palette = () => [\n  \"#ed5f5f\",\n  \"#ed8a5f\",\n  \"#eda85f\",\n  \"#edd35f\",\n  \"#e8ed5f\",\n  \"#c0ed5f\",\n  \"#9fed5f\",\n  \"#79ed5f\",\n  \"#5fed77\",\n  \"#5fed95\",\n  \"#5fedb9\",\n  \"#5fdfed\",\n  \"#5fb4ed\",\n  \"#5f95ed\",\n  \"#5f70ed\",\n  \"#8a5fed\",\n  \"#a65fed\",\n  \"#d55fed\",\n  \"#ed5fd3\",\n  \"#ed5f9f\",\n];\n\nconst paletteColor = (tag) => {\n  const p = palette();\n  return p[paletteHash(tag) % p.length];\n};\n\nconst FileSystemItem = ({ fileName, fileType, lastModified, tagsInFiles }) => {\n  return (\n    <div className=\"template-filesystem-item\">\n      <div className=\"template-filesystem-item-icon\">\n        {fileType === \"file\" ? <FaRegFile /> : <FaFolder />}\n      </div>\n      <div className=\"template-filesystem-item-text\">{fileName}</div>\n\n      {tagsInFiles[fileName] ? (\n        <div className=\"template-filesystem-item-tags\">\n          {tagsInFiles[fileName].map((tag, i) => (\n            <FaTag\n              key={tag}\n              style={{ color: paletteColor(tag), left: `${i * -6}px` }}\n            />\n          ))}\n        </div>\n      ) : (\n        <></>\n      )}\n\n      <div className=\"template-filesystem-item-last-modified\">\n        {lastModified[fileName]}\n      </div>\n    </div>\n  );\n};\n\nconst FileInformation = ({ numberOfDirs, numberOfFiles }) => {\n  return (\n    <div className=\"template-filesystem-header-information\">\n      <div>\n        <FaFolder />\n        <span>{numberOfDirs}</span>\n      </div>\n      <div>\n        <FaRegFile />\n        <span>{numberOfFiles}</span>\n      </div>\n    </div>\n  );\n};\n\nconst SearchItem = ({ search }) => {\n  return (\n    <div className=\"template-filesystem-item\">\n      <div className=\"template-filesystem-item-text-header\">{search.ref}</div>\n      <div\n        className=\"template-filesystem-item-text\"\n        dangerouslySetInnerHTML={{ __html: search.snapshot }}\n      />\n    </div>\n  );\n};\n\nconst TagInformation = ({ tags }) => {\n  if (Object.keys(tags).length === 0) return <></>;\n\n  return (\n    <div className=\"template-display-tags\">\n      {Object.keys(tags).map((key) => (\n        <div\n          key={key}\n          style={{\n            color: paletteColor(key),\n            border: `solid 1px ${paletteColor(key)}`,\n          }}\n        >\n          <FaTag />\n          <span>{key}</span>\n          <span>{tags[key]}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst IndexPage = ({ data }) => {\n  const [siteTitle, setSiteTitle] = useState(\"\");\n  const { url, dirs, files } = { url: \"/algorithms\", dirs: [], files: [\"algorithms\",\"cheat-sheet\",\"keywords\",\"problem-list\"] };\n  const [numberOfFiles, numberOfDirs ] = [4, 0];\n  const [tags, tagsInFiles] = [{}, {}];\n  const [lastModified, setLastModified] = useState({});\n  const [searchResults, setSearchResults] = useState([]);\n\n  useEffect(() => {\n    const nodes = data.allMarkdownRemark.edges\n      .filter((node) => node.node.frontmatter.slug.startsWith(url))\n      .map((node) => {\n        return {\n          slug: node.node.frontmatter.slug.substring(url.length).split(\"/\")[1],\n          date: node.node.frontmatter.lastModified,\n        };\n      });\n\n    const modified = {};\n    nodes.forEach((node) => {\n      modified[node.slug] = node.date;\n    });\n\n    const currentDate = new Date(new Date().toISOString().split(\"T\")[0]);\n\n    for (const key in modified) {\n      if (modified.hasOwnProperty(key)) {\n        modified[key] = formatDate(currentDate, new Date(modified[key]));\n      }\n    }\n\n    setLastModified(modified);\n  }, [data]);\n\n  useEffect(() => {\n    const title = url.substring(url.lastIndexOf(\"/\") + 1, url.length);\n    setSiteTitle(title === \"\" ? \"root\" : title);\n  }, [url]);\n\n  const searches = (\n    <div className=\"template-filesystem-searches\">\n      {searchResults.map((search) => (\n        <Link key={search.ref} to={search.ref}>\n          <SearchItem search={search} />\n        </Link>\n      ))}\n    </div>\n  );\n\n  const filesystem = (\n    <>\n      <div className=\"template-filesystem-directories\">\n        {dirs.map((dir) => (\n          <Link key={dir} to={`${url}/${dir}`}>\n            <FileSystemItem\n              fileName={dir}\n              fileType=\"folder\"\n              lastModified={lastModified}\n              tagsInFiles={tagsInFiles}\n            />\n          </Link>\n        ))}\n      </div>\n      <div className=\"template-filesystem-files\">\n        {files.map((file) => (\n          <Link key={file} to={`${url}/${file}`}>\n            <FileSystemItem\n              fileName={file}\n              fileType=\"file\"\n              lastModified={lastModified}\n              tagsInFiles={tagsInFiles}\n            />\n          </Link>\n        ))}\n      </div>\n    </>\n  );\n\n  return (\n    <Layout>\n      <div className=\"template-structure\">\n        <Searchfield\n          className=\"directory\"\n          setSearchResults={setSearchResults}\n        />\n        <div className=\"template-filesystem\">\n          <div className=\"template-filesystem-header\">\n            {siteTitle !== \"root\" ? (\n              <BackButton parent={url.substring(0, url.lastIndexOf(\"/\"))} />\n            ) : (\n              <></>\n            )}\n            <div className=\"template-filesystem-header-title\">{siteTitle}</div>\n            <FileInformation\n              numberOfDirs={numberOfDirs}\n              numberOfFiles={numberOfFiles}\n            />\n          </div>\n\n          {searchResults.length !== 0 ? searches : filesystem}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: frontmatter___lastModified }) {\n      edges {\n        node {\n          frontmatter {\n            lastModified(formatString: \"YYYY-MM-DD\")\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}