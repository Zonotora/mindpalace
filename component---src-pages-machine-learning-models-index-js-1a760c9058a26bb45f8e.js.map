{"version":3,"sources":["webpack:///./src/pages/machine-learning/models/index.js"],"names":["formatDate","currentDate","date","time","Math","abs","days","ceil","months","floor","years","paletteColor","tag","p","hash","length","i","charCodeAt","paletteHash","FileSystemItem","fileName","fileType","lastModified","tagsInFiles","className","map","key","style","color","left","FileInformation","numberOfDirs","numberOfFiles","TagInformation","tags","Object","keys","border","IndexPage","data","useState","siteTitle","setSiteTitle","url","dirs","files","setLastModified","useEffect","nodes","allMarkdownRemark","edges","filter","node","frontmatter","slug","startsWith","substring","split","modified","forEach","Date","toISOString","hasOwnProperty","title","lastIndexOf","parent","dir","to","file"],"mappings":"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","file":"component---src-pages-machine-learning-models-index-js-1a760c9058a26bb45f8e.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { FaRegFile, FaFolder, FaTag } from \"react-icons/fa\";\n\nimport Layout from \"components/Layout\";\nimport { DirectoryHeader } from \"components/Header\";\nimport { BackButton } from \"components/Button\";\nimport \"templates/template.css\";\n\nconst formatDate = (currentDate, date) => {\n  const time = Math.abs(currentDate - date);\n  const days = Math.ceil(time / (1000 * 60 * 60 * 24));\n  const months = Math.floor(days / 31);\n  const years = Math.floor(days / 365);\n\n  if (years > 0) return `${years} year${years > 1 ? \"s\" : \"\"} ago`;\n  else if (months > 0) return `${months} month${months > 1 ? \"s\" : \"\"} ago`;\n  else if (days === 0) return \"today\";\n  return `${days} day${days > 1 ? \"s\" : \"\"} ago`;\n};\n\nconst paletteHash = (tag) => {\n  var hash = 0;\n  if (tag.length === 0) return hash;\n  for (let i = 0; i < tag.length; i++) {\n    let chr = tag.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0;\n  }\n  return Math.abs(hash);\n};\n\nconst palette = () => [\n  \"#ed5f5f\",\n  \"#ed8a5f\",\n  \"#eda85f\",\n  \"#edd35f\",\n  \"#e8ed5f\",\n  \"#c0ed5f\",\n  \"#9fed5f\",\n  \"#79ed5f\",\n  \"#5fed77\",\n  \"#5fed95\",\n  \"#5fedb9\",\n  \"#5fdfed\",\n  \"#5fb4ed\",\n  \"#5f95ed\",\n  \"#5f70ed\",\n  \"#8a5fed\",\n  \"#a65fed\",\n  \"#d55fed\",\n  \"#ed5fd3\",\n  \"#ed5f9f\",\n];\n\nconst paletteColor = (tag) => {\n  const p = palette();\n  return p[paletteHash(tag) % p.length];\n};\n\nconst FileSystemItem = ({ fileName, fileType, lastModified, tagsInFiles }) => {\n  return (\n    <div className=\"template-filesystem-item\">\n      <div className=\"template-filesystem-item-icon\">\n        {fileType === \"file\" ? <FaRegFile /> : <FaFolder />}\n      </div>\n      <div className=\"template-filesystem-item-text\">{fileName}</div>\n\n      {tagsInFiles[fileName] ? (\n        <div className=\"template-filesystem-item-tags\">\n          {tagsInFiles[fileName].map((tag, i) => (\n            <FaTag\n              key={tag}\n              style={{ color: paletteColor(tag), left: `${i * -6}px` }}\n            />\n          ))}\n        </div>\n      ) : (\n        <></>\n      )}\n\n      <div className=\"template-filesystem-item-last-modified\">\n        {lastModified[fileName]}\n      </div>\n    </div>\n  );\n};\n\nconst FileInformation = ({ numberOfDirs, numberOfFiles }) => {\n  return (\n    <div className=\"template-display-information\">\n      <div>\n        <FaFolder />\n        <span>{numberOfDirs}</span>\n      </div>\n      <div>\n        <FaRegFile />\n        <span>{numberOfFiles}</span>\n      </div>\n    </div>\n  );\n};\n\nconst TagInformation = ({ tags }) => {\n  if (Object.keys(tags).length === 0) return <></>;\n\n  return (\n    <div className=\"template-display-tags\">\n      {Object.keys(tags).map((key) => (\n        <div\n          key={key}\n          style={{\n            color: paletteColor(key),\n            border: `solid 1px ${paletteColor(key)}`,\n          }}\n        >\n          <FaTag />\n          <span>{key}</span>\n          <span>{tags[key]}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst IndexPage = ({ data }) => {\n  const [siteTitle, setSiteTitle] = useState(\"\");\n  const { url, dirs, files } = { url: \"/machine-learning/models\", dirs: [], files: [\"decision-tree\",\"ensembles\",\"random-forests\",\"support-vector-machine\"] };\n  const [numberOfFiles, numberOfDirs ] = [4, 0];\n  const [tags, tagsInFiles] = [{\"chalmers\":4,\"machine-learning\":4}, {\"decision-tree\":[\"chalmers\",\"machine-learning\"],\"ensembles\":[\"chalmers\",\"machine-learning\"],\"random-forests\":[\"chalmers\",\"machine-learning\"],\"support-vector-machine\":[\"chalmers\",\"machine-learning\"]}];\n  const [lastModified, setLastModified] = useState({});\n\n  useEffect(() => {\n    const nodes = data.allMarkdownRemark.edges\n      .filter((node) => node.node.frontmatter.slug.startsWith(url))\n      .map((node) => {\n        return {\n          slug: node.node.frontmatter.slug.substring(url.length).split(\"/\")[1],\n          date: node.node.frontmatter.lastModified,\n        };\n      });\n\n    const modified = {};\n    nodes.forEach((node) => {\n      modified[node.slug] = node.date;\n    });\n\n    const currentDate = new Date(new Date().toISOString().split(\"T\")[0]);\n\n    for (const key in modified) {\n      if (modified.hasOwnProperty(key)) {\n        modified[key] = formatDate(currentDate, new Date(modified[key]));\n      }\n    }\n\n    setLastModified(modified);\n  }, [data]);\n\n  useEffect(() => {\n    const title = url.substring(url.lastIndexOf(\"/\") + 1, url.length);\n    setSiteTitle(title === \"\" ? \"root\" : title);\n  }, [url]);\n\n  return (\n    <Layout>\n      <DirectoryHeader />\n\n      <div className=\"template-structure\">\n        <div className=\"template-filesystem\">\n          <div className=\"template-filesystem-container\">\n            <div className=\"template-filesystem-header\">\n              {siteTitle !== \"root\" ? (\n                <BackButton parent={url.substring(0, url.lastIndexOf(\"/\"))} />\n              ) : (\n                <></>\n              )}\n              <div>{siteTitle}</div>\n            </div>\n\n            <div className=\"template-filesystem-directories\">\n              {dirs.map((dir) => (\n                <Link key={dir} to={`${url}/${dir}`}>\n                  <FileSystemItem\n                    fileName={dir}\n                    fileType=\"folder\"\n                    lastModified={lastModified}\n                    tagsInFiles={tagsInFiles}\n                  />\n                </Link>\n              ))}\n            </div>\n            <div className=\"template-filesystem-files\">\n              {files.map((file) => (\n                <Link key={file} to={`${url}/${file}`}>\n                  <FileSystemItem\n                    fileName={file}\n                    fileType=\"file\"\n                    lastModified={lastModified}\n                    tagsInFiles={tagsInFiles}\n                  />\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"template-display\">\n          <FileInformation\n            numberOfDirs={numberOfDirs}\n            numberOfFiles={numberOfFiles}\n          />\n          <TagInformation tags={tags} />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: frontmatter___lastModified }) {\n      edges {\n        node {\n          frontmatter {\n            lastModified(formatString: \"YYYY-MM-DD\")\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}