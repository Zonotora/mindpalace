{"version":3,"sources":["webpack:///./src/pages/python/index.js"],"names":["formatDate","currentDate","date","time","Math","abs","days","ceil","months","floor","years","FileSystemItem","fileName","fileType","lastModified","className","IndexPage","data","useState","siteTitle","setSiteTitle","url","dirs","files","setLastModified","useEffect","nodes","allMarkdownRemark","edges","filter","node","frontmatter","slug","startsWith","map","substring","length","split","modified","forEach","Date","toISOString","key","hasOwnProperty","title","lastIndexOf","parent","isRoot","dir","to","file"],"mappings":"4FAAA,gFAQMA,GARN,UAQmB,SAACC,EAAaC,GAC/B,IAAMC,EAAOC,KAAKC,IAAIJ,EAAcC,GAC9BI,EAAOF,KAAKG,KAAKJ,EAAI,OACrBK,EAASJ,KAAKK,MAAMH,EAAO,IAC3BI,EAAQN,KAAKK,MAAMH,EAAO,KAEhC,OAAII,EAAQ,EAAaA,EAAV,SAAuBA,EAAQ,EAAI,IAAM,IAAzC,OACNF,EAAS,EAAaA,EAAV,UAAyBA,EAAS,EAAI,IAAM,IAA5C,OACH,IAATF,EAAmB,QAClBA,EAAV,QAAqBA,EAAO,EAAI,IAAM,IAAtC,SAGIK,EAAiB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aAC5C,OACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,iCACC,SAAbF,EAAsB,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAEzC,yBAAKE,UAAU,iCAAiCH,GAChD,yBAAKG,UAAU,0CACZD,EAAaF,MAsGPI,UAhGG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACIC,mBAAS,IAApCC,EADuB,KACZC,EADY,KAEtBC,EAA4B,UAAvBC,EAAwC,GAAlCC,EAA6C,CAAC,aAAa,QAAQ,SAAS,SAAS,gBAF1E,EAGUL,mBAAS,IAA1CJ,EAHuB,KAGTU,EAHS,KAoC9B,OA/BAC,qBAAU,WACR,IAAMC,EAAQT,EAAKU,kBAAkBC,MAClCC,QAAO,SAACC,GAAD,OAAUA,EAAKA,KAAKC,YAAYC,KAAKC,WAAWZ,MACvDa,KAAI,SAACJ,GACJ,MAAO,CACLE,KAAMF,EAAKA,KAAKC,YAAYC,KAAKG,UAAUd,EAAIe,QAAQC,MAAM,KAAK,GAClEnC,KAAM4B,EAAKA,KAAKC,YAAYjB,iBAI5BwB,EAAW,GACjBZ,EAAMa,SAAQ,SAACT,GACbQ,EAASR,EAAKE,MAAQF,EAAK5B,QAG7B,IAAMD,EAAc,IAAIuC,MAAK,IAAIA,MAAOC,cAAcJ,MAAM,KAAK,IAEjE,IAAK,IAAMK,KAAOJ,EACZA,EAASK,eAAeD,KAC1BJ,EAASI,GAAO1C,EAAWC,EAAa,IAAIuC,KAAKF,EAASI,MAI9DlB,EAAgBc,KACf,CAACrB,IAEJQ,qBAAU,WACR,IAAMmB,EAAQvB,EAAIc,UAAUd,EAAIwB,YAAY,KAAO,EAAGxB,EAAIe,QAC1DhB,EAAuB,KAAVwB,EAAe,OAASA,KACpC,CAACvB,IAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEyB,OAAQzB,EAAIc,UAAU,EAAGd,EAAIwB,YAAY,MACzCE,OAAsB,SAAd5B,IAGV,yBAAKJ,UAAU,sBACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,8BACb,6BAAMI,IAGR,yBAAKJ,UAAU,mCACZO,EAAKY,KAAI,SAACc,GAAD,OACR,kBAAC,IAAD,CAAMN,IAAKM,EAAKC,GAAO5B,EAAL,IAAY2B,GAC5B,kBAACrC,EAAD,CACEC,SAAUoC,EACVnC,SAAS,SACTC,aAAcA,SAKtB,yBAAKC,UAAU,6BACZQ,EAAMW,KAAI,SAACgB,GAAD,OACT,kBAAC,IAAD,CAAMR,IAAKQ,EAAMD,GAAO5B,EAAL,IAAY6B,GAC7B,kBAACvC,EAAD,CACEC,SAAUsC,EACVrC,SAAS,OACTC,aAAcA,WAQ1B,yBAAKC,UAAU","file":"component---src-pages-python-index-js-20e8dcec623ec3baaad1.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { FaRegFile, FaFolder } from \"react-icons/fa\";\n\nimport Layout from \"components/Layout\";\nimport { DirectoryHeader } from \"components/Header\";\nimport \"templates/template.css\";\n\nconst formatDate = (currentDate, date) => {\n  const time = Math.abs(currentDate - date);\n  const days = Math.ceil(time / (1000 * 60 * 60 * 24));\n  const months = Math.floor(days / 31);\n  const years = Math.floor(days / 365);\n\n  if (years > 0) return `${years} year${years > 1 ? \"s\" : \"\"} ago`;\n  else if (months > 0) return `${months} month${months > 1 ? \"s\" : \"\"} ago`;\n  else if (days === 0) return \"today\";\n  return `${days} day${days > 1 ? \"s\" : \"\"} ago`;\n};\n\nconst FileSystemItem = ({ fileName, fileType, lastModified }) => {\n  return (\n    <div className=\"template-filesystem-item\">\n      <div className=\"template-filesystem-item-icon\">\n        {fileType === \"file\" ? <FaRegFile /> : <FaFolder />}\n      </div>\n      <div className=\"template-filesystem-item-text\">{fileName}</div>\n      <div className=\"template-filesystem-item-last-modified\">\n        {lastModified[fileName]}\n      </div>\n    </div>\n  );\n};\n\nconst IndexPage = ({ data }) => {\n  const [siteTitle, setSiteTitle] = useState(\"\");\n  const { url, dirs, files } = { url: \"/python\", dirs: [], files: [\"matplotlib\",\"numpy\",\"pandas\",\"python\",\"scikit-learn\"] };\n  const [lastModified, setLastModified] = useState({});\n\n  useEffect(() => {\n    const nodes = data.allMarkdownRemark.edges\n      .filter((node) => node.node.frontmatter.slug.startsWith(url))\n      .map((node) => {\n        return {\n          slug: node.node.frontmatter.slug.substring(url.length).split(\"/\")[1],\n          date: node.node.frontmatter.lastModified,\n        };\n      });\n\n    const modified = {};\n    nodes.forEach((node) => {\n      modified[node.slug] = node.date;\n    });\n\n    const currentDate = new Date(new Date().toISOString().split(\"T\")[0]);\n\n    for (const key in modified) {\n      if (modified.hasOwnProperty(key)) {\n        modified[key] = formatDate(currentDate, new Date(modified[key]));\n      }\n    }\n\n    setLastModified(modified);\n  }, [data]);\n\n  useEffect(() => {\n    const title = url.substring(url.lastIndexOf(\"/\") + 1, url.length);\n    setSiteTitle(title === \"\" ? \"root\" : title);\n  }, [url]);\n\n  return (\n    <Layout>\n      <DirectoryHeader\n        parent={url.substring(0, url.lastIndexOf(\"/\"))}\n        isRoot={siteTitle === \"root\"}\n      />\n\n      <div className=\"template-structure\">\n        <div className=\"template-filesystem\">\n          <div className=\"template-filesystem-container\">\n            <div className=\"template-filesystem-header\">\n              <div>{siteTitle}</div>\n            </div>\n\n            <div className=\"template-filesystem-directories\">\n              {dirs.map((dir) => (\n                <Link key={dir} to={`${url}/${dir}`}>\n                  <FileSystemItem\n                    fileName={dir}\n                    fileType=\"folder\"\n                    lastModified={lastModified}\n                  />\n                </Link>\n              ))}\n            </div>\n            <div className=\"template-filesystem-files\">\n              {files.map((file) => (\n                <Link key={file} to={`${url}/${file}`}>\n                  <FileSystemItem\n                    fileName={file}\n                    fileType=\"file\"\n                    lastModified={lastModified}\n                  />\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"template-display\"></div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: frontmatter___lastModified }) {\n      edges {\n        node {\n          frontmatter {\n            lastModified(formatString: \"YYYY-MM-DD\")\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}