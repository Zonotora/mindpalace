{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/templates/template.js"],"names":["Header","siteTitle","style","background","marginBottom","margin","to","color","textDecoration","defaultProps","Layout","children","data","useStaticQuery","site","siteMetadata","title","insertClass","index","arr","name","length","substring","Template","markdownRemark","frontmatter","mathHtml","html","expr","split","i","e","inline","katex","renderToString","join","start","indexOf","multiline","renderMathExpr","className","date","dangerouslySetInnerHTML","__html","pageQuery"],"mappings":"0JAIMA,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,4BACEC,MAAO,CACLC,WAAW,QACXC,aAAa,YAGf,6BACE,wBAAIF,MAAO,CAAEG,OAAQ,IACnB,kBAAC,IAAD,CACEC,GAAG,IACHJ,MAAO,CACLK,MAAM,QACNC,eAAe,SAGhBP,OAWXD,EAAOS,aAAe,CACpBR,UAAU,IAGGD,Q,UCHAU,IAzBA,SAAC,GAAkB,IAAD,EAAfC,EAAe,EAAfA,SACVC,EAAOC,YAAe,cAU5B,OACE,oCACE,kBAAC,EAAD,CAAQZ,WAAW,UAAAW,EAAKE,KAAKC,oBAAV,eAAwBC,QAAxB,UACnB,6BACE,8BAAOL,O,kCCtBf,mJAOMM,GAPN,oBAOoB,SAACC,EAAOC,EAAKC,GAC3BF,EAAQ,GAAKA,EAAQC,EAAIE,OAAS,IACpCF,EAAID,EAAQ,GAAQC,EAAID,EAAQ,GAAGI,UACjC,EACAH,EAAID,EAAQ,GAAGG,OAAS,GAF1B,gBAGiBD,EAHjB,SAIAD,EAAID,EAAQ,GAAZ,eAAgCC,EAAID,EAAQ,GAAGI,UAC7C,EACAH,EAAID,EAAQ,GAAGG,WAgCN,SAASE,EAAT,GAEX,IACMC,EADP,EADDZ,KAEQY,eACAC,EAAsBD,EAAtBC,YACFC,EAhCe,SAACC,GAGtB,IAFA,IAAMC,EAAOD,EAAKE,MAAM,MAEfC,EAAI,EAAGA,EAAIF,EAAKP,OAAQS,IAAK,CACpC,IAAMC,EAAIH,EAAKE,GACf,GAAIA,EAAI,GAAK,EAAG,CAEd,IADA,IAAME,EAASD,EAAEF,MAAM,KACdX,EAAQ,EAAGA,EAAQc,EAAOX,OAAQH,GAAS,EAClDc,EAAOd,GAASe,IAAMC,eAAeF,EAAOd,IAE9CU,EAAKE,GAAKE,EAAOG,KAAK,QACjB,CACL,IAAMC,EAAQL,EAAEM,QAAQ,OACpBC,EAAYP,EACZK,EAAQ,IAEVE,GADAA,EAAYA,EAAUhB,UAAUc,EAAQ,EAAGL,EAAEV,SACvBC,UAAU,EAAGgB,EAAUD,QAAQ,UAGvDpB,EAAYa,EAAGF,EAAM,kBACrBA,EAAKE,GAAKG,IAAMC,eAAeI,IAInC,OAAOV,EAAKO,KAAK,IAQAI,CADaf,EAATG,MAGrB,OACE,kBAAC,IAAD,KACE,yBAAKa,UAAU,IACb,yBAAKA,UAAU,IACb,4BAAKf,EAAYT,OACjB,4BAAKS,EAAYgB,MACjB,yBACED,UAAU,YACVE,wBAAyB,CAAEC,OAAQjB,QAQxC,IAAMkB,EAAS,c","file":"component---src-templates-template-js-0d142ac261f6d15dc18c.js","sourcesContent":["import { Link } from \"gatsby\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `coral`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div>\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nimport Header from \"./header\";\nimport \"./layout.css\";\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div>\n        <main>{children}</main>\n      </div>\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport katex from \"katex\";\nimport \"./template.css\";\nimport \"./syntax.css\";\n\nconst insertClass = (index, arr, name) => {\n  if (index > 0 && index < arr.length - 1) {\n    arr[index - 1] = `${arr[index - 1].substring(\n      0,\n      arr[index - 1].length - 3\n    )} <div class=\"${name}\"> <p>`;\n    arr[index + 1] = `</p> </div> ${arr[index + 1].substring(\n      4,\n      arr[index + 1].length\n    )}`;\n  }\n};\n\nconst renderMathExpr = (html) => {\n  const expr = html.split(\"$$\");\n\n  for (let i = 0; i < expr.length; i++) {\n    const e = expr[i];\n    if (i % 2 == 0) {\n      const inline = e.split(\"$\");\n      for (let index = 1; index < inline.length; index += 2)\n        inline[index] = katex.renderToString(inline[index]);\n\n      expr[i] = inline.join(\"\");\n    } else {\n      const start = e.indexOf(\"<p>\");\n      let multiline = e;\n      if (start > 0) {\n        multiline = multiline.substring(start + 3, e.length);\n        multiline = multiline.substring(0, multiline.indexOf(\"</p>\"));\n      }\n\n      insertClass(i, expr, \"multiline-math\");\n      expr[i] = katex.renderToString(multiline);\n    }\n  }\n\n  return expr.join(\"\");\n};\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data; // data.markdownRemark holds your post data\n  const { frontmatter, html } = markdownRemark;\n  const mathHtml = renderMathExpr(html);\n\n  return (\n    <Layout>\n      <div className=\"\">\n        <div className=\"\">\n          <h1>{frontmatter.title}</h1>\n          <h2>{frontmatter.date}</h2>\n          <div\n            className=\"container\"\n            dangerouslySetInnerHTML={{ __html: mathHtml }}\n          />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        date(formatString: \"YYYY-MM-DD\")\n        slug\n        title\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}