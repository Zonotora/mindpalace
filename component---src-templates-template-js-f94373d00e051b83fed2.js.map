{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/templates/template.js"],"names":["Header","siteTitle","style","background","paddingBottom","margin","to","color","textDecoration","defaultProps","Layout","children","data","useStaticQuery","site","siteMetadata","title","TreeHeader","className","name","height","href","ContentTree","headers","map","header","key","Template","markdownRemark","frontmatter","html","JSON","parse","dangerouslySetInnerHTML","__html","pageQuery"],"mappings":"yJAIMA,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,4BACEC,MAAO,CACLC,WAAW,QACXC,cAAe,SAGjB,6BACE,wBAAIF,MAAO,CAAEG,OAAQ,IACnB,kBAAC,IAAD,CACEC,GAAG,IACHJ,MAAO,CACLK,MAAM,QACNC,eAAe,SAGhBP,OAWXD,EAAOS,aAAe,CACpBR,UAAU,IAGGD,Q,UCHAU,IAzBA,SAAC,GAAkB,IAAD,EAAfC,EAAe,EAAfA,SACVC,EAAOC,YAAe,cAU5B,OACE,oCACE,kBAAC,EAAD,CAAQZ,WAAW,UAAAW,EAAKE,KAAKC,oBAAV,eAAwBC,QAAxB,UACnB,6BACE,8BAAOL,O,kCCtBf,8HAMMM,GANN,oBAMmB,SAAC,GAAD,QAAGC,iBAAH,MAAe,GAAf,EAAmBC,EAAnB,EAAmBA,KAAnB,IAAyBC,cAAzB,MAAkC,kBAAlC,SACjB,uBAAGC,KAAI,IAAMF,GACX,0BAAMD,UAAS,QAAUA,GACvB,yBAAKA,UAAU,OAAOhB,MAAO,CAAEkB,YAC/B,yBAAKF,UAAU,kBACb,mCAEF,yBAAKA,UAAU,UAAf,KACA,2BAAIC,OAKJG,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAClB,oCACE,yBAAKL,UAAU,gBACb,wBAAIA,UAAU,cACXK,EAAQC,KAAI,SAACC,GAAD,OACX,wBAAIC,IAAKD,EAAON,MACd,kBAACF,EAAD,CAAYE,KAAMM,EAAON,eAQtB,SAASQ,EAAT,GAEX,IACMC,EADP,EADDhB,KAEQgB,eACAC,EAAsBD,EAAtBC,YAAaC,EAASF,EAATE,KACfP,EAAUQ,KAAKC,MAAMH,EAAYN,SAEvC,OACE,kBAAC,IAAD,KACE,yBAAKL,UAAU,IACb,yBAAKA,UAAU,SACb,kBAACI,EAAD,CAAaC,QAASA,IACtB,yBACEL,UAAU,YACVe,wBAAyB,CAAEC,OAAQJ,QAQxC,IAAMK,EAAS,c","file":"component---src-templates-template-js-f94373d00e051b83fed2.js","sourcesContent":["import { Link } from \"gatsby\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `coral`,\n      paddingBottom: \"10px\",\n    }}\n  >\n    <div>\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nimport Header from \"./header\";\nimport \"./layout.css\";\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div>\n        <main>{children}</main>\n      </div>\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport \"./template.css\";\nimport \"./syntax.css\";\n\nconst TreeHeader = ({ className = \"\", name, height = \"calc(50% + 1px)\" }) => (\n  <a href={`#${name}`}>\n    <span className={`node ${className}`}>\n      <div className=\"test\" style={{ height }} />\n      <div className=\"visibility-box\">\n        <p>1.0</p>\n      </div>\n      <div className=\"status\"> </div>\n      <p>{name}</p>\n    </span>\n  </a>\n);\n\nconst ContentTree = ({ headers }) => (\n  <>\n    <div className=\"content-tree\">\n      <ul className=\"content-ul\">\n        {headers.map((header) => (\n          <li key={header.name}>\n            <TreeHeader name={header.name} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  </>\n);\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data; // data.markdownRemark holds your post data\n  const { frontmatter, html } = markdownRemark;\n  const headers = JSON.parse(frontmatter.headers);\n\n  return (\n    <Layout>\n      <div className=\"\">\n        <div className=\"float\">\n          <ContentTree headers={headers} />\n          <div\n            className=\"container\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        date(formatString: \"YYYY-MM-DD\")\n        slug\n        title\n        headers\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}